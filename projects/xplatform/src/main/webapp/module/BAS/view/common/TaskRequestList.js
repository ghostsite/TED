/*
 * File: BAS/view/common/TaskRequestList.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BAS.view.common.TaskRequestList', {
	extend : 'MES.view.form.BaseForm',

	requires : [ 'BAS.store.BasViewTaskRequestListOut.list' ],

	xtype : 'bas_requestlist',

	title : 'Task Request List',

	itemId : 'BasTaskRequestList',
	
	mixins : {
		buttonHandler : 'MES.mixin.ButtonHandler'
	},
	
	/* BaseForm의 기본 margin을 제거하기 위해서 bodyCls를 재 설정함 */ 
	bodyCls : '',

	layout : {
		type : 'vbox',
		align : 'stretch'
	},

	dockedItems : [ {
		xtype : 'mes_task_buttons',
		items : [ '->', 'Submit','Approve','Reject', 'Release','Cancel', 'Close' ]
	} ],

	initComponent : function() {
		var me = this;

		this.store = Ext.create('BAS.store.BasViewTaskRequestListOut.list');
		
		Ext.applyIf(me, {
			items : [ {
				xtype : 'gridpanel',
				flex : 1,
				itemId : 'grdRequestList',
				cls : 'navyGrid',
				columnLines : true,
				store : this.store,
				selModel : Ext.create('Ext.selection.CheckboxModel'),// Multiple 설정.
				columns : [ {
					xtype : 'rownumberer',
					width : 25,
					text : ''
				}, {
					dataIndex : 'factory',
					width : 55,
					align : 'center',
					text : 'Factory'
				}, {
					xtype : 'textactioncolumn',
					dataIndex : 'title',
					flex : 1,
					minWidth : 200,
					text : 'Title',
					handler : function(grid, rowIndex, colIndex) {
						me.fireEvent('view',grid, rowIndex, colIndex);
					}
				}, {
					dataIndex : 'fileGroupId',
					width : 25,
					renderer : function(v,mata,rec){
						if(v){
							mata.tdCls = 'iconClip';
						}
						return '';
					}
				}, {
					dataIndex : 'reqType',
					minWidth : 100,
					align : 'center',
					width : '80',
					text : 'Task Type',
					renderer : function(v){
						if(v)
							v = v.toLowerCase();
						return T('Caption.BasOther.reqtype'+v);
					}
				}, {
					width : 75,
					dataIndex : 'status',
					align : 'center',
					text : 'Status',
					renderer : function(v){
						if(v)
							v = v.toLowerCase();
						return T('Caption.BasOther.'+v);
					}
				}, {
					width : 70,
					dataIndex : 'createUserId',
					align : 'center',
					text : 'Requester'
				}, {
					width : 70,
					dataIndex : 'approveUserId',
					align : 'center',
					text : 'Approver'
				}, {
					dataIndex : 'createTime',
					width : 140,
					align : 'center',
					text : 'Request Time'
				} ],
				viewConfig : {
					getRowClass : function(record, rowIndex, rowParams, store) {
						var status = record.get('status');
						if(me.menuType == 'request' && status != 'submitted' && status != 'approved'){
							return 'textColorGray';
						}
					}
				},
				dockedItems : [ {
					xtype : 'pagingtoolbar',
					store : this.store,
					displayInfo : true,
					dock : 'bottom'
				} ]
			}, {
				xtype : 'textareafield',
				cls : 'marginT5 marginR7 marginL5',
				fieldLabel : 'Opinion',
				height : 45,
				maxLength : 200,
				enforceMaxLength : true,
				itemId : 'txtOpinion',
				name : 'opinion'
			} ]
		});

		me.callParent(arguments);
	},

	buildSupplement : function() {
		return {
			xtype : 'formsup',

			title : 'Filter Conditions',
			defaults : {
				labelAlign : 'top'
			},
			fields : [ {
				xtype : 'codeview',
				itemId : 'cdvFactory',
				name : 'factory',
				fieldLabel : T('Caption.Other.Factory'),
				codeviewName : 'TbFactory'
			}, {
				xtype : 'combobox',
				fieldLabel : 'Entity Type',
				store : [ [ 'MWipOprDef', 'Operation' ], [ 'MWipFlwDef', 'Flow' ], [ 'MWipMatDef', 'Material' ], ['Test', 'Test'] ],
				displayField : 'type',
				valueField : 'value',
				name : 'entityType'
			}, {
				xtype : 'codeview',
				fieldLabel : 'Requester',
				codeviewName : 'SERVICE',
				store : 'SEC.store.SecViewUserListOut.List',
				params : {
					procstep : '1'
				},
				popupConfig : {
					title : T('Caption.Other.Requester'),
					columns : [ {
						header : T('Caption.Other.User ID'),
						dataIndex : 'userId',
						flex : 1
					}, {
						header : T('Caption.Other.Description'),
						dataIndex : 'userDesc',
						flex : 2
					} ]
				},
				fields : [ {
					column : 'userId',
					name : 'requester',
					maxLength : 30,
					enforceMaxLength : true,
					vtype : 'nospace'
				} ]
			}, {
				xtype : 'dateperiod',
				fieldLabel : 'Request Date',
				defaultValue : new Date(),
				period : '1m',
				labelAlign : 'top',
				layout : 'hbox',
				fromName : 'fromTime',
				toName : 'toTime'
			} ]
		};
	},
	
	setReqListBtn : function(type) {
		var btnSubmit = false;
		var btnApprove = false;
		var btnReject = false;
		var btnRelease = false;
		var btnCancel = false;

		switch (type) {
		case 'requested':
			btnApprove = true;
			btnReject = true;
			break;
		case 'request':
			btnRelease = true;
			btnCancel = true;
			break;
		case 'rejected':
			btnCancel = true;
			break;
		case 'created':
			btnSubmit = true;
			btnCancel = true;
			break;
		}

		this.sub('btnSubmit').setVisible(btnSubmit);
		this.sub('btnApprove').setVisible(btnApprove);
		this.sub('btnReject').setVisible(btnReject);
		this.sub('btnRelease').setVisible(btnRelease);
		this.sub('btnCancel').setVisible(btnCancel);
	}

});