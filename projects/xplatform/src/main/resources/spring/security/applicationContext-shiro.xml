<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util-3.2.xsd"
	default-lazy-init="true">

	<description>Shiro安全配置</description>

	<bean id="subjectFactory" class="org.apache.shiro.web.mgt.DefaultWebSubjectFactory" />
	
	<!-- Shiro's main business-tier object for web-enabled applications -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroDbRealm" />
		<property name="sessionMode" value="http" /><!--native or http-->
		<property name="cacheManager" ref="shiroEhcacheManager" /><!--有可能跟Hibernate的ehcache有冲突-->
		<property name="subjectFactory" ref="subjectFactory" />
	</bean>

	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO" />
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="sessionDAO" ref="sessionDAO" />
	</bean>
    
	<!-- 項目自定义Realm -->
	<bean id="shiroDbRealm" class="com.ted.xplatform.service.ShiroDbRealm" />
	
    
	<!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
		 web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
		 to wire things with more control as well utilize nice Spring things such as
		 PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<property name="loginUrl" value="/showLogin" />
		<property name="successUrl" value="/main" />
		<property name="unauthorizedUrl" value="/showLogin"/>
		<!-- The 'filters' property is usually not necessary unless performing an override, which we
			 want to do here (make authc point to a PassthruAuthenticationFilter instead of the
			 default FormAuthenticationFilter: 
			FilterName	 Class
			 
			anon		org.apache.shiro.web.filter.authc.AnonymousFilter
			authc		org.apache.shiro.web.filter.authc.FormAuthenticationFilter
			authcBasic	org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
			logout		org.apache.shiro.web.filter.authc.LogoutFilter
			noSessionCreation	org.apache.shiro.web.filter.session.NoSessionCreationFilter
			perms		org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
			port		org.apache.shiro.web.filter.authz.PortFilter
			rest		org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
			roles		org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
			ssl			org.apache.shiro.web.filter.authz.SslFilter
			user		org.apache.shiro.web.filter.authc.UserFilter
		-->
		<property name="filters">
			<util:map>
				<entry key="authcForm">
					<bean class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter"/>
				</entry>
				<entry key="authcPass">
					<bean class="org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter"/>
				</entry>
				<entry key="authcBasic">
					<bean class="org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter"/>
				</entry>
				<entry key="authcAjax">
					<bean class="com.ted.xplatform.filter.HttpStatusAuthFilter"/>
				</entry>
				<entry key="logout">
					<bean class="org.apache.shiro.web.filter.authc.LogoutFilter"/>
				</entry>
			</util:map>
		</property>
		<property name="filterChainDefinitions">
			<value>
                / = anon
                /logout = logout
                /login = anon
                /main = anon
                /showLogin = anon
                /**/*.htm = anon
                /**/*.html = anon
                /**/*.css =anon
                /**/*.js =anon
                /**/image/*.* =anon
                /**/images/*.* =anon
                /**/icons/*.* =anon
                /**/loading/*.* =anon
                /** = authcPass,authcAjax
			</value>
			<!--/** = authc-->
		</property>
	</bean>

	<!-- 用户授权信息Cache, 采用EhCache -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:spring/security/ehcache-shiro.xml"/>
	</bean>
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- AOP式方法级权限检查  : 注视掉下面的，是因为有循环依赖  TODO check it-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>
	
</beans>